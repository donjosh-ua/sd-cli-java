spring.application.name=sd-cli-java
spring.mvc.servlet.path=/api/v1

server.http.interface=0.0.0.0
server.servlet.context-path=/api

# PostgreSQL Configuration
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/dbsd}
spring.datasource.username=${DATABASE_USERNAME:admin}
spring.datasource.password=${DATABASE_PASSWORD:admin}

# Hibernate properties
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.open-in-view=true

server.error.include-message=always
server.port=${PORT:8080}

# Development profile
spring.devtools.restart.enabled=true
spring.devtools.livereload.enabled=true
spring.devtools.restart.additional-paths=src/main/java,src/main/resources
spring.devtools.restart.exclude=static/**,public/**

# Docker-specific DevTools configuration
spring.devtools.remote.secret=mysecret
spring.devtools.restart.poll-interval=1000
spring.devtools.restart.quiet-period=400

# Kafka Configuration
# spring.kafka.bootstrap-servers=10.24.160.135:9092
# spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# spring.kafka.producer.properties.spring.json.add.type.headers=false

# spring.kafka.consumer.properties.spring.json.trusted.packages=distributed.systems.sd_cli_java.model.dto
# spring.kafka.consumer.auto-offset-reset=earliest
# spring.kafka.consumer.group-id=expense-group